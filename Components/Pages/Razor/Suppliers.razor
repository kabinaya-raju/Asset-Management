@page "/suppliers"
@using Management.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<AppDbContext> DbFactory  
@* <--- CHANGED HERE *@
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Supplier Master</h3>

<button class="btn btn-primary mb-3" @onclick="AddNewSupplier">Add New Supplier</button>

@if (showEditForm)
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">@(currentSupplier.SupplierId == 0 ? "Add New Supplier" : "Edit Supplier")</h5>

            <EditForm Model="@currentSupplier" OnValidSubmit="@SaveSupplier">
                <DataAnnotationsValidator />

                <div class="form-group mb-3">
                    <label>Supplier Name:</label>
                    <InputText @bind-Value="currentSupplier.SupplierName" class="form-control" />
                    <ValidationMessage For="@(() => currentSupplier.SupplierName)" />
                </div>

                <div class="form-group mb-3">
                    <label>Phone:</label>
                    <InputText @bind-Value="currentSupplier.Phone" class="form-control" />
                    <ValidationMessage For="@(() => currentSupplier.Phone)" />
                </div>

                <div class="form-group mb-3">
                    <label>Purchase Date:</label>
                    <InputDate  @bind-Value="currentSupplier.PurchaseDate" class="form-control" />
                    <ValidationMessage For="@(() => currentSupplier.PurchaseDate)" />
                </div>

                <button type="submit" class="btn btn-success me-2">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>

        </div>
    </div>
}

@if (showDetails && selectedSupplier is not null)
{
    <div class="card mb-3 border-info">
        <div class="card-header bg-info text-white">
            <h5>Supplier Details (ID: @selectedSupplier.SupplierId)</h5>
        </div>
        <div class="card-body">
            <p><strong>Supplier Name:</strong> @selectedSupplier.SupplierName</p>
            <p><strong>Phone:</strong> @selectedSupplier.Phone</p>
            <p><strong>Purchase Date:</strong> @selectedSupplier.PurchaseDate.ToString("yyyy-MM-dd")</p>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearDetails">Close</button>
        </div>
    </div>
}


@if (showConfirmDeleteModal && deleteTargetSupplier is not null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the following supplier?</p>
                    <ul>
                        <li><strong>Supplier Name:</strong> @deleteTargetSupplier.SupplierName</li>
                        <li><strong>Phone:</strong> @deleteTargetSupplier.Phone</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@if (suppliers == null)
{
    <p>Loading suppliers...</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Supplier ID</th>
                <th>Supplier Name</th>
                <th>Phone</th>
                <th>Purchase Date</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var supplier in suppliers)
            {
                <tr>
                    <td>@supplier.SupplierId</td>
                    <td>@supplier.SupplierName</td>
                    <td>@supplier.Phone</td>
                    <td>@supplier.PurchaseDate.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => EditSupplier(supplier)">Edit</button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowDetails(supplier)">Details</button>
                        <button class=" btn btn-sm btn-danger me-1" @onclick="() => PromptDelete(supplier)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<SupplierMaster>? suppliers; // Changed to nullable List for safer initial state
    private SupplierMaster currentSupplier = new();
    private bool showEditForm = false;

    private bool showConfirmDeleteModal = false;
    private bool showDetails = false;
    private SupplierMaster? selectedSupplier;
    private SupplierMaster? deleteTargetSupplier;

    protected override async Task OnInitializedAsync()
    {
        await LoadSuppliers();
    }

    private async Task LoadSuppliers()
    {
        using var dbContext = DbFactory.CreateDbContext(); @* <--- CHANGED HERE *@
        try
        {
            suppliers = await dbContext.Suppliers.ToListAsync(); @* <--- CHANGED HERE *@
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading suppliers: {ex.Message}");
            suppliers = new List<SupplierMaster>(); // Initialize to empty list on error
        }
    }

    private void AddNewSupplier()
    {
        currentSupplier = new SupplierMaster
        {
            PurchaseDate = DateTime.Today
        };
        showEditForm = true;
        // StateHasChanged(); // Often not needed here, Blazor handles it after event
    }

    private void EditSupplier(SupplierMaster supplier)
    {
        currentSupplier = new SupplierMaster
        {
            SupplierId = supplier.SupplierId,
            SupplierName = supplier.SupplierName,
            Phone = supplier.Phone,
            PurchaseDate = supplier.PurchaseDate
        };

        showEditForm = true;
        // StateHasChanged(); // Often not needed here, Blazor handles it after event
    }

    private async Task SaveSupplier()
    {
        using var dbContext = DbFactory.CreateDbContext(); @* <--- CHANGED HERE *@
        try
        {
            if (currentSupplier.SupplierId == 0)
            {
                dbContext.Suppliers.Add(currentSupplier); @* <--- CHANGED HERE *@
            }
            else
            {
                var existingEntity = await dbContext.Suppliers.FindAsync(currentSupplier.SupplierId); @* <--- CHANGED HERE *@
                if (existingEntity != null)
                {
                    dbContext.Entry(existingEntity).CurrentValues.SetValues(currentSupplier); @* <--- CHANGED HERE *@
                }
            }

            await dbContext.SaveChangesAsync(); @* <--- CHANGED HERE *@
            showEditForm = false;
            await LoadSuppliers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving supplier: {ex.Message}");
            // Consider showing a user-friendly error message here
        }
    }

    private void CancelEdit()
    {
        showEditForm = false;
        currentSupplier = new SupplierMaster(); // Reset the current supplier model
    }


    private void PromptDelete(SupplierMaster supplier)
    {
        deleteTargetSupplier = supplier;
        showConfirmDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        deleteTargetSupplier = null;
        showConfirmDeleteModal = false;
    }

    private async Task ConfirmDelete()
    {
        using var dbContext = DbFactory.CreateDbContext(); @* <--- CHANGED HERE *@
        if (deleteTargetSupplier != null)
        {
            try
            {
                dbContext.Suppliers.Remove(deleteTargetSupplier); @* <--- CHANGED HERE *@
                await dbContext.SaveChangesAsync(); @* <--- CHANGED HERE *@
                await LoadSuppliers();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting supplier: {ex.Message}");
                // Optional: Provide user feedback
            }
        }
        CloseDeleteModal();
    }

    private void ShowDetails(SupplierMaster supplier)
    {
        selectedSupplier = supplier;
        showDetails = true;
    }

    private void ClearDetails()
    {
        selectedSupplier = null;
        showDetails = false;
    }
}