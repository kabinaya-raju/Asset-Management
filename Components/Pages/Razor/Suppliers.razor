@page "/suppliers"
@using Management.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Supplier Master</h3>

<button class="btn btn-primary mb-3" @onclick="AddNewSupplier">Add New Supplier</button>

@if (showEditForm)
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">@(currentSupplier.SupplierId == 0 ? "Add New Supplier" : "Edit Supplier")</h5>

            <EditForm Model="@currentSupplier" OnValidSubmit="@SaveSupplier">
                <DataAnnotationsValidator />
               

                <div class="form-group mb-3">
                    <label>Supplier Name:</label>
                    <InputText @bind-Value="currentSupplier.SupplierName" class="form-control" />
                    <ValidationMessage For="@(() => currentSupplier.SupplierName)" />
                </div>

                <div class="form-group mb-3">
                    <label>Phone:</label>
                    <InputText @bind-Value="currentSupplier.Phone" class="form-control" />
                    <ValidationMessage For="@(() => currentSupplier.Phone)" />
                </div>

                <div class="form-group mb-3">
                    <label>Purchase Date:</label>
                    <InputDate @bind-Value="currentSupplier.PurchaseDate" class="form-control" TValue="DateTime" />
                    <ValidationMessage For="@(() => currentSupplier.PurchaseDate)" />
                </div>

                

                <button type="submit" class="btn btn-success me-2">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@if (showDetails && selectedSupplier is not null)
{
    <div class="card mb-3 border-info">
        <div class="card-header bg-info text-white">
            <h5>Supplier Details (ID: @selectedSupplier.SupplierId)</h5>
        </div>
        <div class="card-body">
            <p><strong>Supplier Name:</strong> @selectedSupplier.SupplierName</p>
            <p><strong>Phone:</strong> @selectedSupplier.Phone</p>
            <p><strong>Purchase Date:</strong> @selectedSupplier.PurchaseDate.ToString("yyyy-MM-dd")</p>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearDetails">Close</button>
        </div>
    </div>
}

@if (showConfirmStatusModal && supplierToUpdateStatus is not null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header @(supplierToUpdateStatus.IsActive ? "bg-warning" : "bg-success") text-white">
                    <h5 class="modal-title">@((supplierToUpdateStatus.IsActive ? "Deactivate" : "Activate")) Supplier</h5>
                    <button type="button" class="btn-close" @onclick="CloseStatusModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to @((supplierToUpdateStatus.IsActive ? "deactivate" : "activate")) the following supplier?</p>
                    <ul>
                        <li><strong>Supplier Name:</strong> @supplierToUpdateStatus.SupplierName</li>
                        <li><strong>Phone:</strong> @supplierToUpdateStatus.Phone</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseStatusModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmStatusUpdate">Yes, @(supplierToUpdateStatus.IsActive ? "Deactivate" : "Activate")</button>
                </div>
            </div>
        </div>
    </div>
}

@if (suppliers != null && suppliers.Count > 0)
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>SUPPLIER ID</th>
                <th>SUPPLIER NAME</th>
                <th>PHONE</th>
                <th>PURCHASE DATE</th>
                <th>STATUS</th>
                <th>ACTIONS</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var supplier in suppliers)
            {
                <tr>
                    <td>@supplier.SupplierId</td>
                    <td>@supplier.SupplierName</td>
                    <td>@supplier.Phone</td>
                    <td>@supplier.PurchaseDate.ToString("yyyy-MM-dd")</td>
                    <td>
                        @if (supplier.IsActive)
                        {
                            <span class="badge bg-success">Active</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Inactive</span>
                        }
                    </td>
                    <td>
                        <!-- Edit button -->
                        <button class="btn btn-sm btn-info" @onclick="() => EditSupplier(supplier)">Edit</button>

                        <!-- Show Details button -->
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowDetails(supplier)">Details</button>

                        <!-- Toggle Active/Inactive button -->
                        <button class="btn btn-sm @(supplier.IsActive ? "btn-info" : "btn-success")"
                                @onclick="() => ToggleActive(supplier)">
                            @(supplier.IsActive ? "Deactivate" : "Activate")
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<SupplierMaster>? suppliers;
    private SupplierMaster currentSupplier = new();
    private bool showEditForm = false;

    private bool showDetails = false;
    private bool showConfirmStatusModal = false;
    private SupplierMaster? selectedSupplier;
    private SupplierMaster? supplierToUpdateStatus;

    protected override async Task OnInitializedAsync()
    {
        await LoadSuppliers();
    }

    private async Task LoadSuppliers()
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            suppliers = await dbContext.Suppliers.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading suppliers: {ex.Message}");
            suppliers = new List<SupplierMaster>();
        }
    }

    private void AddNewSupplier()
    {
        currentSupplier = new SupplierMaster
        {
            PurchaseDate = DateTime.Today
             
        };
        showEditForm = true;
    }

    private void EditSupplier(SupplierMaster supplier)
    {
        currentSupplier = new SupplierMaster
        {
            SupplierId = supplier.SupplierId,
            SupplierName = supplier.SupplierName,
            Phone = supplier.Phone,
            PurchaseDate = supplier.PurchaseDate,
            IsActive = supplier.IsActive
        };
        showEditForm = true;
    }

    private async Task SaveSupplier()
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            if (currentSupplier.SupplierId == 0)
            {
                dbContext.Suppliers.Add(currentSupplier);
               
            }
            else
            {
                var existingEntity = await dbContext.Suppliers.FindAsync(currentSupplier.SupplierId);
                if (existingEntity != null)
                {
                    dbContext.Entry(existingEntity).CurrentValues.SetValues(currentSupplier);
                }
            }

            await dbContext.SaveChangesAsync();
            showEditForm = false;
            await LoadSuppliers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving supplier: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        showEditForm = false;
        currentSupplier = new SupplierMaster();
    }

    private void ShowDetails(SupplierMaster supplier)
    {
        selectedSupplier = supplier;
        showDetails = true;
    }

    private async Task ToggleActive(SupplierMaster supplier)
    {
        using var dbContext = DbFactory.CreateDbContext();
        var entity = await dbContext.Suppliers.FindAsync(supplier.SupplierId);
        if (entity != null)
        {
            entity.IsActive = !entity.IsActive; // Toggle the IsActive flag
            await dbContext.SaveChangesAsync(); // Save changes to the database
        }

        await LoadSuppliers(); // Reload the list to reflect changes
    }

    private void ShowStatusConfirmationModal(SupplierMaster supplier)
    {
        supplierToUpdateStatus = supplier;
        showConfirmStatusModal = true;
    }

    private void CloseStatusModal()
    {
        supplierToUpdateStatus = null;
        showConfirmStatusModal = false;
    }


    private async Task ConfirmStatusUpdate()
    {
        using var dbContext = DbFactory.CreateDbContext();
        if (supplierToUpdateStatus != null)
        {
            try
            {
                // Toggle the IsActive flag
                supplierToUpdateStatus.IsActive = !supplierToUpdateStatus.IsActive;

                // Save the changes to the database
                dbContext.Suppliers.Update(supplierToUpdateStatus);
                await dbContext.SaveChangesAsync();

                // Reload the suppliers list to reflect the changes
                await LoadSuppliers();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating status: {ex.Message}");
            }
        }

        CloseStatusModal();
    }

    private void ClearDetails()
    {
        selectedSupplier = null;
        showDetails = false;
    }

}
