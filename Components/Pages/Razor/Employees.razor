@page "/employeemasters"

@inject NavigationManager Navigation
@using Management.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject AppDbContext DbContext
@inject IJSRuntime JSRuntime

<button class="btn btn-primary mb-3" @onclick="AddNewEmployee">Add New Employee</button>

@if (showEditForm)
{
    <EditForm Model="@currentEmployee" OnValidSubmit="@SaveEmployee">
        <DataAnnotationsValidator />

        <div class="form-group mb-3">
            <label for="firstName">First Name:</label>
            <InputText id="firstName" @bind-Value="currentEmployee.FirstName" class="form-control" />
            <ValidationMessage For="@(() => currentEmployee.FirstName)" />
        </div>

        <div class="form-group mb-3">
            <label for="lastName">Last Name:</label>
            <InputText id="lastName" @bind-Value="currentEmployee.LastName" class="form-control" />
            <ValidationMessage For="@(() => currentEmployee.LastName)" />
        </div>

        <div class="form-group mb-3">
            <label for="gender">Gender:</label>
            <InputSelect id="gender" @bind-Value="currentEmployee.Gender" class="form-select">
                <option value="">-- Select Gender --</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </InputSelect>
            <ValidationMessage For="@(() => currentEmployee.Gender)" />
        </div>

        <div class="form-group mb-3">
            <label for="position">Position:</label>
            <InputSelect id="position" @bind-Value="currentEmployee.Position" class="form-select">
                <option value="">-- Select Position --</option>
                <option value="Manager">Manager</option>
                <option value="HR Manager">HR Manager</option>
                <option value="Project Manager">Project Manager</option>
                <option value="Marketing Manager">Marketing Manager</option>
                <option value="DevOps  Architect">DevOps Architect</option>
                <option value="Solution Architect">Solution Architect</option>
                <option value="Software Architect">Software Architect</option>
                <option value="AI & ML Architect">AI & ML Architect</option>
                <option value="UI & UX Designer">UI & UX Designer</option>
                <option value="Software Developer">Software Developer</option>
                <option value="AI & ML Developer">AI & ML Developer</option>
                <option value="Software Tester">Software Tester</option>
            </InputSelect>
            <ValidationMessage For="@(() => currentEmployee.Position)" />
        </div>

        <button type="submit" class="btn btn-success me-2">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </EditForm>

        
 }

@if (showDetails && selectedEmployee is not null)
{
    <div class="card mb-3 border-info">
        <div class="card-header bg-info text-white">
            <h5>Employee Details (ID: @selectedEmployee.EmployeeId)</h5>
        </div>
        <div class="card-body">
            <p><strong>First Name:</strong> @selectedEmployee.FirstName</p>
            <p><strong>Last Name:</strong> @selectedEmployee.LastName</p>
            <p><strong>Gender:</strong> @selectedEmployee.Gender</p>
            <p><strong>Position:</strong> @selectedEmployee.Position</p>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearDetails">Close</button>
        </div>
    </div>
}

@if (showConfirmDeleteModal && deleteTargetEmployee is not null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this employee?</p>
                    <ul>
                        <li><strong>Name:</strong> @deleteTargetEmployee.FirstName @deleteTargetEmployee.LastName</li>
                        <li><strong>Gender:</strong> @deleteTargetEmployee.Gender</li>
                        <li><strong>Position:</strong> @deleteTargetEmployee.Position</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

 
        @if (employees == null)
        {
            <p>Loading employees....</p>
        }
        else
        {

        <table class="table">
            <thead>
                <tr>
                <th>EMPLOYEE ID</th>
                <th>FIRST NAME</th>
                <th>LAST NAME</th>
                <th>GENDER</th>
                <th>POSITION</th>
                <th>ACTION</th>
                    
                </tr>
            </thead>
            <tbody>
                @foreach (var emp in employees)
                {
                    <tr>
                        <td>@emp.EmployeeId</td>
                        <td>@emp.FirstName</td>
                        <td>@emp.LastName</td>
                        <td>@emp.Gender</td>
                        <td>@emp.Position</td>
                        <td>
                            <button class="btn btn-sm btn-info me-1" @onclick="() => EditEmployee(emp)">Edit</button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowDetails(emp)">Details</button>
                        <button class="btn btn-sm btn-danger me-1" @onclick="() => PromptDelete(emp)">Delete</button>
                    </td>
                    </tr>
                }
            </tbody>
        </table>
  }
 
   


@code {

    private List<EmployeeMaster>? employees; // List to display
    private EmployeeMaster currentEmployee = new EmployeeMaster(); // Model for the form
    private bool showEditForm = false;

    private bool showDetails = false;
    private bool showConfirmDeleteModal = false;

    private EmployeeMaster? selectedEmployee;
    private EmployeeMaster? deleteTargetEmployee;

    protected override async Task OnInitializedAsync()
    {
        
            await LoadEmployees();
       
    }

   


    public async ValueTask DisposeAsync()
    {
        if (DbContext is not null)
        {
            await DbContext.DisposeAsync();
        }
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await DbContext.Employees.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
            employees = new List<EmployeeMaster>();
        }
    }

    private void AddNewEmployee()
    {
        try
        {
           
            showEditForm = true;
            StateHasChanged(); // Ensure UI refreshes
            Console.WriteLine($"showEditForm set to: {showEditForm}");
            Console.WriteLine("AddNewEmployee method completed successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in AddNewEmployee: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private void EditEmployee(EmployeeMaster emp)
    {
        currentEmployee = emp;
        showEditForm = true;
    }


    private async Task SaveEmployee()
    {

        try
        {
            if (currentEmployee.EmployeeId == 0) // New employee
            {
                DbContext.Employees.Add(currentEmployee); // <-- Changed from _dbContext.Employees
            }
            else // Existing employee
            {
                DbContext.Employees.Update(currentEmployee); // <-- Changed from _dbContext.Employees
            }

            await DbContext.SaveChangesAsync(); // <-- Changed from _dbContext.SaveChangesAsync()
            showEditForm = false;
            await LoadEmployees(); // Reload data
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Full exception during employee save: {ex}"); // Log full exception for debugging
        }
    }

    private void CancelEdit()
    {
        showEditForm = false;
    }

    private void ShowDetails(EmployeeMaster employee)
    {
        selectedEmployee = employee;
        showDetails = true;
    }

    private void ClearDetails()
    {
        selectedEmployee = null;
        showDetails = false;
    }

    private void PromptDelete(EmployeeMaster employee)
    {
        deleteTargetEmployee = employee;
        showConfirmDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        deleteTargetEmployee = null;
        showConfirmDeleteModal = false;
    }

    private async Task ConfirmDelete()
    {
        if (deleteTargetEmployee != null)
        {
            DbContext.Employees.Remove(deleteTargetEmployee);
            await DbContext.SaveChangesAsync();
            await LoadEmployees();
        }
        CloseDeleteModal();
    }
}