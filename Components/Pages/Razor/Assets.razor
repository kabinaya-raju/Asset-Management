@page "/assetmasters"

@using Management.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject IDbContextFactory<AppDbContext> DbFactory 
@* CHANGED: Injected DbContextFactory *@
@inject IJSRuntime JSRuntime


<button class="btn btn-primary mb-3" @onclick="AddNewAsset">Add New Asset</button>


@if (showEditForm)
{
    <div class="card mb-3">
        <div class="card-header">
            <h5 class="card-title">@(currentAsset.AssetId == 0 ? "Add New Asset" : $"Edit Asset: {currentAsset.AssetName}")</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@currentAsset" OnValidSubmit="@SaveAsset">
                <DataAnnotationsValidator />

                <!-- Supplier Filter Section -->
                 <div class="mb-3">
                 <label for="supplierSelect">Select Supplier ID:</label>
                 <select id="supplierSelect" class="form-control" @onchange="OnSupplierSelected">
                 <option value="">Select a Supplier</option>
                 @foreach (var supplier in suppliers)
                 {
                      <option value="@supplier.SupplierId">@supplier.SupplierId</option>
                 }
                 </select>
                 </div>

                <div class="form-group mb-3">
                    <label for="assetName">Asset Name:</label>
                    <InputText id="assetName" @bind-Value="currentAsset.AssetName" class="form-control" />
                    <ValidationMessage For="@(() => currentAsset.AssetName)" />
                </div>

                <div class="form-group mb-3">
                    <label for="assetType">Asset Type:</label>
                    <InputText id="assetType" @bind-Value="currentAsset.AssetType" class="form-control" />
                    <ValidationMessage For="@(() => currentAsset.AssetType)" />
                </div>

                <div class="form-group mb-3">
                    <label for="serialNumber">Serial Number:</label>
                    <InputText id="serialNumber" @bind-Value="currentAsset.SerialNumber" class="form-control" />
                    <ValidationMessage For="@(() => currentAsset.SerialNumber)" />
                </div>


                <button type="submit" class="btn btn-success me-2">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        </div>
    </div>
}


@if (showDetails && selectedAsset is not null)
{
    <div class="card mb-3 border-info">
        <div class="card-header bg-info text-white">
            <h5>Asset Details (ID: @selectedAsset.AssetId)</h5>
        </div>
        <div class="card-body">
            <p><strong>Asset Name:</strong> @selectedAsset.AssetName</p>
            <p><strong>Asset Type:</strong> @selectedAsset.AssetType</p>
            <p><strong>Serial Number:</strong> @selectedAsset.SerialNumber</p>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearDetails">Close</button>
        </div>
    </div>
}

@if (showConfirmDeleteModal && deleteTargetAsset is not null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this asset?</p>
                    <ul>
                        <li><strong>Name:</strong> @deleteTargetAsset.AssetName</li>
                        <li><strong>Type:</strong> @deleteTargetAsset.AssetType</li>
                        <li><strong>Serial:</strong> @deleteTargetAsset.SerialNumber</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}


@* Display the list of assets in a table *@

@if (assets == null)
{
    <p>Loading assets....</p> @* Changed "employees" to "assets" for clarity *@
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ASSET ID</th>
                <th>SUPPLIER ID</th>
                <th>ASSET NAME</th>
                <th>ASSET TYPE</th>
                <th>SERIAL NUMBER</th>
                <th>ACTION</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var asset in assets)
            {
                <tr>
                    <td>@asset.AssetId</td>
                    <td>@asset.AssetName</td>
                    <td>@asset.AssetType</td>
                    <td>@asset.SerialNumber</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => EditAsset(asset)">Edit</button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowDetails(asset)">Details</button>
                        <button class="btn btn-sm btn-danger me-1" @onclick="() => PromptDelete(asset)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    // The DbContext instance for this component
    private List<AssetMaster>? assets;
    private List<SupplierMaster> suppliers = new List<SupplierMaster>();
    private AssetMaster currentAsset = new AssetMaster();
    private bool showEditForm = false;
    private bool showDetails = false;
    private bool showConfirmDeleteModal = false;
    private AssetMaster? selectedAsset;
    private AssetMaster? deleteTargetAsset;
    private int selectedSupplierId = 0;

    protected override async Task OnInitializedAsync()
    {
        
        try
        {
            await LoadSuppliers();
            await LoadAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during OnInitializedAsync in Assets.razor: {ex.Message}"); // Added logging
           
        }
    }
    private async Task LoadSuppliers()
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            suppliers = await dbContext.Suppliers.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading suppliers: {ex.Message}");
        }
    }

    private int pageSize = 10;  // Number of records per page
    private int currentPage = 1;  // Current page being viewed

    private async Task LoadAssets()
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
                 assets = await dbContext.Assets
                                     .Skip((currentPage - 1) * pageSize)  
                                     .Take(pageSize) 
                                     .ToListAsync(); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assets: {ex.Message}");
            assets = new List<AssetMaster>();
        }
    }




    private void AddNewAsset()
    {
        try
        {
            currentAsset = new AssetMaster(); 
            showEditForm = true; 

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in AddNewAsset: {ex.Message}"); // Added logging
        }
    }


    private void EditAsset(AssetMaster asset)
    {
        currentAsset = new AssetMaster
        {
            AssetId = asset.AssetId,
            AssetName = asset.AssetName,
            AssetType = asset.AssetType,
            SerialNumber = asset.SerialNumber
        };
        showEditForm = true; // Show the form
    }


    private async Task SaveAsset()
    {
        using var dbContext = DbFactory.CreateDbContext(); 
        try
        {
            if (currentAsset.AssetId == 0) 
            {
                dbContext.Assets.Add(currentAsset); 
            }
            else 
            {
                var existingAsset = await dbContext.Assets.FindAsync(currentAsset.AssetId); 
                if (existingAsset != null)
                {
                    dbContext.Entry(existingAsset).CurrentValues.SetValues(currentAsset); 
                }
            }

            await dbContext.SaveChangesAsync(); 
            showEditForm = false;
            currentAsset = new AssetMaster(); 
            await LoadAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving asset: {ex}");

        }
    }


    private void CancelEdit()
    {
        showEditForm = false; 
        currentAsset = new AssetMaster(); 
    }

    private void ShowDetails(AssetMaster asset)
    {
        selectedAsset = asset;
        showDetails = true;
    }

    private void ClearDetails()
    {
        selectedAsset = null;
        showDetails = false;
    }

    private void PromptDelete(AssetMaster asset)
    {
        deleteTargetAsset = asset;
        showConfirmDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        deleteTargetAsset = null;
        showConfirmDeleteModal = false;
    }

    private async Task ConfirmDelete()
    {
        using var dbContext = DbFactory.CreateDbContext(); 
        if (deleteTargetAsset != null)
        {
            try
            {
                dbContext.Assets.Remove(deleteTargetAsset); 
                await dbContext.SaveChangesAsync(); 
                await LoadAssets();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting asset: {ex.Message}");
             
            }
        }
        CloseDeleteModal();
    }

    private async Task OnSupplierSelected(ChangeEventArgs e)
    {
        selectedSupplierId = int.Parse(e.Value.ToString());

        // Fetch the asset details related to the selected supplier
        var asset = await GetAssetDetailsBySupplierId(selectedSupplierId);

        if (asset != null)
        {
            // Populate the asset fields with data from the AssetMaster
            currentAsset.AssetName = asset.AssetName;
            currentAsset.AssetType = asset.AssetType;
            currentAsset.SerialNumber = asset.SerialNumber;
        }
        else
        {
            // Reset the fields if no asset is found for the selected supplier
            currentAsset.AssetName = string.Empty;
            currentAsset.AssetType = string.Empty;
            currentAsset.SerialNumber = string.Empty;
        }

        // Reload assets (if needed)
        await LoadAssets();
    }




    private async Task<SupplierMaster?> GetSupplierDetailsById(int supplierId)
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            // Fetch the supplier details by SupplierId
            return await dbContext.Suppliers
                                  .Where(s => s.SupplierId == supplierId)
                                  .FirstOrDefaultAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching supplier details: {ex.Message}");
            return null;
        }
    }

    private async Task<AssetMaster?> GetAssetDetailsBySupplierId(int supplierId)
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            // Assume AssetMaster has a SupplierId foreign key relationship
            return await dbContext.Assets
                                  .Where(a => a.SupplierId == supplierId)  // Assuming there's a SupplierId in AssetMaster
                                  .FirstOrDefaultAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching asset details: {ex.Message}");
            return null;
        }
    }


}