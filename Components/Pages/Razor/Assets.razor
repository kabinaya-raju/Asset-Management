@page "/assetmasters"

@using Management.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms 
@inject NavigationManager Navigation
@inject AppDbContext DbContext
@inject IJSRuntime JSRuntime


<button class="btn btn-primary mb-3" @onclick="AddNewAsset">Add New Asset</button>


@if (showEditForm)
{
    <div class="card mb-3">
        <div class="card-header">
            <h5 class="card-title">@(currentAsset.AssetId == 0 ? "Add New Asset" : $"Edit Asset: {currentAsset.AssetName}")</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@currentAsset" OnValidSubmit="@SaveAsset">
                <DataAnnotationsValidator />
              

                <div class="form-group mb-3">
                    <label for="assetName">Asset Name:</label>
                    <InputText id="assetName" @bind-Value="currentAsset.AssetName" class="form-control" />
                    <ValidationMessage For="@(() => currentAsset.AssetName)" />
                </div>

                <div class="form-group mb-3">
                    <label for="assetType">Asset Type:</label>
                    <InputText id="assetType" @bind-Value="currentAsset.AssetType" class="form-control" />
                    <ValidationMessage For="@(() => currentAsset.AssetType)" />
                </div>

                <div class="form-group mb-3">
                    <label for="serialNumber">Serial Number:</label>
                    <InputText id="serialNumber" @bind-Value="currentAsset.SerialNumber" class="form-control" />
                    <ValidationMessage For="@(() => currentAsset.SerialNumber)" />
                </div>

                <button type="submit" class="btn btn-success me-2" >Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        </div>
    </div>
}


@if (showDetails && selectedAsset is not null)
{
    <div class="card mb-3 border-info">
        <div class="card-header bg-info text-white">
            <h5>Asset Details (ID: @selectedAsset.AssetId)</h5>
        </div>
        <div class="card-body">
            <p><strong>Asset Name:</strong> @selectedAsset.AssetName</p>
            <p><strong>Asset Type:</strong> @selectedAsset.AssetType</p>
            <p><strong>Serial Number:</strong> @selectedAsset.SerialNumber</p>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearDetails">Close</button>
        </div>
    </div>
}

@if (showConfirmDeleteModal && deleteTargetAsset is not null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this asset?</p>
                    <ul>
                        <li><strong>Name:</strong> @deleteTargetAsset.AssetName</li>
                        <li><strong>Type:</strong> @deleteTargetAsset.AssetType</li>
                        <li><strong>Serial:</strong> @deleteTargetAsset.SerialNumber</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}


@* Display the list of assets in a table *@

@if (assets == null)
 {
        <p>Loading employees....</p>
  }
  else
        {
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                <th>AssetId</th>
                    <th>ASSET NAME</th>
                    <th>ASSET TYPE</th>
                    <th>SERIAL NUMBER</th>
                    <th>ACTION</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var asset in assets)
                {
                    <tr>
                        <td>@asset.AssetId</td>
                        <td>@asset.AssetName</td>
                        <td>@asset.AssetType</td>
                        <td>@asset.SerialNumber</td>
                        <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => EditAsset(asset)">Edit</button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowDetails(asset)">Details</button>
                        <button class="btn btn-sm btn-danger me-1" @onclick="() => PromptDelete(asset)">Delete</button>
                    </td>
                    </tr>
                }
            </tbody>
        </table>
  }  


@code {
 // The DbContext instance for this component
    private List<AssetMaster>? assets; 
    private AssetMaster currentAsset = new AssetMaster(); 
    private bool showEditForm = false;
    private bool showDetails = false;
    private bool showConfirmDeleteModal = false;
    private AssetMaster? selectedAsset;
    private AssetMaster? deleteTargetAsset;
   
    protected override async Task OnInitializedAsync()
    {
        // Only load assets and check DB connectivity, no JS interop here
        try
        {
            await LoadAssets();
        }
        catch (Exception ex)
        {
            // Optionally log to server-side logs if available
        }
    }

    private async Task LoadAssets()
    {
        try
        {
            assets = await DbContext.Assets.ToListAsync();
        }
        catch (Exception ex)
        {
            assets = new List<AssetMaster>();
        }
    }

    

    // Implementation of IAsyncDisposable to ensure the DbContext is properly disposed
    public async ValueTask DisposeAsync()
    {
        if (DbContext is not null)
        {
            await DbContext.DisposeAsync();
        }
        // No call to base.DisposeAsync() needed, as ComponentBase doesn't implement it.
    }

    // Loads all assets from the database
    

    // Initiates adding a new asset
    private void AddNewAsset()
    {
        try{
        currentAsset = new AssetMaster(); // Create a new empty AssetMaster instance
        showEditForm = true; // Show the form
        StateHasChanged();
        }
    catch (Exception ex)
        {
            // Optionally log to server-side logs if available
        }
    }

    // Initiates editing an existing asset
    private void EditAsset(AssetMaster asset)
    {
        // Create a *copy* of the asset to edit. This prevents changes from being
        // tracked by the DbContext directly until SaveAsset is called, allowing
        // for "cancel" functionality without affecting the original object immediately.
        currentAsset = new AssetMaster
        {
            AssetId = asset.AssetId,
            AssetName = asset.AssetName,
            AssetType = asset.AssetType,
            SerialNumber = asset.SerialNumber
        };
        showEditForm = true; // Show the form
    }

    // Saves the current asset (either new or edited) to the database
    private async Task SaveAsset()
    {
        try
        {
            if (currentAsset.AssetId == 0) // New asset
            {
                DbContext.Assets.Add(currentAsset);
            }
            else // Existing asset - update using tracked entity
            {
                var existingAsset = await DbContext.Assets.FindAsync(currentAsset.AssetId);
                if (existingAsset != null)
                {
                    DbContext.Entry(existingAsset).CurrentValues.SetValues(currentAsset);
                }
            }

            await DbContext.SaveChangesAsync();
            showEditForm = false;
            currentAsset = new AssetMaster();
            await LoadAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving asset: {ex}");
        }
    }

    // Cancels the add/edit operation and hides the form
    private void CancelEdit()
    {
        showEditForm = false; // Hide the form
        currentAsset = new AssetMaster(); // Reset the current asset
    }

    private void ShowDetails(AssetMaster asset)
    {
        selectedAsset = asset;
        showDetails = true;
    }

    private void ClearDetails()
    {
        selectedAsset = null;
        showDetails = false;
    }

    private void PromptDelete(AssetMaster asset)
    {
        deleteTargetAsset = asset;
        showConfirmDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        deleteTargetAsset = null;
        showConfirmDeleteModal = false;
    }

    private async Task ConfirmDelete()
    {
        if (deleteTargetAsset != null)
        {
            DbContext.Assets.Remove(deleteTargetAsset);
            await DbContext.SaveChangesAsync();
            await LoadAssets();
        }

        CloseDeleteModal();
    }
}