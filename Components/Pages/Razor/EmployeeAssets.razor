@page "/employeeassets"
@using Management.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IJSRuntime JSRuntime

<button class="btn btn-primary mb-3" @onclick="AddNewAssignment">Add New Employee Asset</button>

@if (showEditForm)
{
    <div class="card mb-3">
        <div class="card-header">
            <h5 class="card-title">@(currentAssignment.AssignmentId == 0 ? "Add New Assignment" : $"Edit Assignment: {currentAssignment.AssignmentId}")</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@currentAssignment" OnValidSubmit="@SaveAssignment">
                <DataAnnotationsValidator />
 
                <div class="mb-3">
                    <label for="employeeSelect">Employee Id & Name:</label>
                    <InputSelect id="employeeSelect" @bind-Value="currentAssignment.EmployeeId" class="form-control">
                        <option value="">Select an Employee</option>
                        @foreach (var emp in employees)
                        {
                            <option value="@emp.EmployeeId">@emp.EmployeeId - @emp.FirstName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => currentAssignment.EmployeeId)" />
                </div>

                <div class="mb-3">
                    <label for="assetSelect">Asset:</label>
                    <InputSelect id="assetSelect" @bind-Value="currentAssignment.AssetId" class="form-control" @onchange="OnAssetSelected">
                        <option value="">Select an Asset</option>
                        @foreach (var asset in availableAssets)
                        {
                            <option value="@asset.AssetId">@asset.AssetId - @asset.AssetName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => currentAssignment.AssetId)" />
                </div>

                <div class="form-group mb-3">
                    <label>Model Name:</label>
                    <input type="text" readonly class="form-control-plaintext" value="@selectedAssetModelName" />
                </div>

                <div class="form-group mb-3">
                    <label>Asset Type:</label>
                    <input type="text" readonly class="form-control-plaintext" value="@selectedAssetType" />
                </div>

                <div class="form-group mb-3">
                    <label for="issueDate">Issue Date:</label>
                    <InputDate id="issueDate" @bind-Value="currentAssignment.IssueDate" class="form-control" />
                    <ValidationMessage For="@(() => currentAssignment.IssueDate)" />
                </div>

                <button type="submit" class="btn btn-success me-2">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@if (showDetails && selectedAssignment != null)
{
    <div class="card mb-3 border-info">
        <div class="card-header bg-info text-white">
            <h5>Assignment Details (ID: @selectedAssignment.AssignmentId)</h5>
        </div>
        <div class="card-body">
            <p><strong>Employee:</strong> @(selectedAssignment.Employee?.FirstName ?? "N/A") (ID: @selectedAssignment.EmployeeId)</p>
            <p><strong>Model:</strong> @(selectedAssignment.Asset?.AssetName ?? "N/A")(ID: @selectedAssignment.AssetId)</p>
            <p><strong>Asset Type:</strong> @(selectedAssignment.Asset?.AssetType ?? "N/A")</p>
            <p><strong>Serial Number:</strong> @(selectedAssignment.Asset?.SerialNumber ?? "N/A")</p>
            <p><strong>Issue Date:</strong> @selectedAssignment.IssueDate.ToShortDateString()</p>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearDetails">Close</button>
        </div>
    </div>
}

@if (showConfirmDeleteModal && deleteTargetAssignment != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this assignment?</p>
                    <ul>
                        <li><strong>Assignment ID:</strong> @deleteTargetAssignment.AssignmentId</li>
                        
                        <li><strong>Asset:</strong> @(deleteTargetAssignment.Asset?.AssetName ?? "N/A")</li>
                        <li><strong>Issue Date:</strong> @deleteTargetAssignment.IssueDate.ToShortDateString()</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@if (assignments == null)
{
    <p>Loading assignments....</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>EMPLOYEE ASSET ID </th>
                <th>EMPLOYEE NAME & ID</th>
                <th>MODEL NAME & ASSET ID </th>
                <th>ASSET TYPE</th>
                <th>ISSUE DATE</th>
                <th>ACTION</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var assignment in assignments)
            {
                <tr>
                    <td>@assignment.AssignmentId</td>
                    <td>@(assignment.Employee?.FirstName ?? "N/A") (ID: @assignment.EmployeeId)</td>
                    <td>@(assignment.Asset?.AssetName ?? "N/A")(ID: @assignment.AssetId)</td>
                    <td>@(assignment.Asset?.AssetType ?? "N/A")</td>
                    <td>@assignment.IssueDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => EditAssignment(assignment)">Edit</button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowDetails(assignment)">Details</button>
                        <button class="btn btn-sm btn-danger me-1" @onclick="() => PromptDelete(assignment)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EmployeeAsset>? assignments;
    private List<EmployeeMaster> employees = new List<EmployeeMaster>();
    private List<AssetMaster> availableAssets = new List<AssetMaster>();
    private EmployeeAsset currentAssignment = new EmployeeAsset { IssueDate = DateTime.Today };
    private bool showEditForm = false;
    private bool showDetails = false;
    private bool showConfirmDeleteModal = false;
    private EmployeeAsset? selectedAssignment;
    private EmployeeAsset? deleteTargetAssignment;
    private string selectedAssetModelName = string.Empty;
    private string selectedAssetType = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssignments();
        await LoadEmployees();
        await LoadAvailableAssets();
    }

    private async Task LoadAssignments()
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            // Load assignments with related Employee and Asset
            assignments = await dbContext.EmployeeAssets
                .Include(ea => ea.Employee)
                .Include(ea => ea.Asset)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assignments: {ex.Message}");
            assignments = new List<EmployeeAsset>();
        }
    }

    private async Task LoadEmployees()
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            employees = await dbContext.Employees.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
            employees = new List<EmployeeMaster>();
        }
    }

    private async Task LoadAvailableAssets()
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            availableAssets = await dbContext.Assets.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assets: {ex.Message}");
            availableAssets = new List<AssetMaster>();
        }
    }

    private void AddNewAssignment()
    {
        currentAssignment = new EmployeeAsset { IssueDate = DateTime.Today };
        selectedAssetModelName = string.Empty;
        selectedAssetType = string.Empty;
        showEditForm = true;
    }

    private void EditAssignment(EmployeeAsset assignment)
    {
        currentAssignment = new EmployeeAsset
        {
            AssignmentId = assignment.AssignmentId,
            EmployeeId = assignment.EmployeeId,
            AssetId = assignment.AssetId,
            IssueDate = assignment.IssueDate
        };

        // Set the selected asset details for display
        var asset = availableAssets.FirstOrDefault(a => a.AssetId == assignment.AssetId);
        if (asset != null)
        {
            selectedAssetModelName = asset.AssetName ?? string.Empty;
            selectedAssetType = asset.AssetType;
        }
        else
        {
            selectedAssetModelName = string.Empty;
            selectedAssetType = string.Empty;
        }

        showEditForm = true;
    }

    private async Task OnAssetSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int assetId))
        {
            var asset = availableAssets.FirstOrDefault(a => a.AssetId == assetId);
            if (asset != null)
            {
                selectedAssetModelName = asset.AssetName ?? string.Empty;
                selectedAssetType = asset.AssetType;
            }
            else
            {
                selectedAssetModelName = string.Empty;
                selectedAssetType = string.Empty;
            }
        }
        else
        {
            selectedAssetModelName = string.Empty;
            selectedAssetType = string.Empty;
        }
    }

    private async Task SaveAssignment()
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            if (currentAssignment.EmployeeId <= 0 || currentAssignment.AssetId <= 0)
            {
                return;
            }

            if (currentAssignment.AssignmentId == 0)
            {
                dbContext.EmployeeAssets.Add(currentAssignment);
            }
            else
            {
                var existingAssignment = await dbContext.EmployeeAssets.FindAsync(currentAssignment.AssignmentId);
                if (existingAssignment != null)
                {
                    dbContext.Entry(existingAssignment).CurrentValues.SetValues(currentAssignment);
                }
                else
                {
                    return;
                }
            }

            await dbContext.SaveChangesAsync();
            showEditForm = false;
            currentAssignment = new EmployeeAsset { IssueDate = DateTime.Today };
            await LoadAssignments();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving assignment: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        showEditForm = false;
        currentAssignment = new EmployeeAsset { IssueDate = DateTime.Today };
        selectedAssetModelName = string.Empty;
        selectedAssetType = string.Empty;
    }

    private void ShowDetails(EmployeeAsset assignment)
    {
        selectedAssignment = assignment;
        showDetails = true;
    }

    private void ClearDetails()
    {
        selectedAssignment = null;
        showDetails = false;
    }

    private void PromptDelete(EmployeeAsset assignment)
    {
        deleteTargetAssignment = assignment;
        showConfirmDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        deleteTargetAssignment = null;
        showConfirmDeleteModal = false;
    }

    private async Task ConfirmDelete()
    {
        using var dbContext = DbFactory.CreateDbContext();
        if (deleteTargetAssignment != null)
        {
            try
            {
                dbContext.EmployeeAssets.Remove(deleteTargetAssignment);
                await dbContext.SaveChangesAsync();
                await LoadAssignments();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting assignment: {ex.Message}");
            }
        }
        CloseDeleteModal();
    }
}