@page "/employeeassets"

@using Management.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop

@* Removed: @implements IAsyncDisposable - DbContextFactory handles disposal *@
@inject NavigationManager Navigation
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IJSRuntime JSRuntime

<button class="btn btn-primary mb-3" @onclick="AddNewEmployeeAsset">Add New EmployeeAsset</button>

@if (showEditForm)
{
    <div class="card mb-3">
        <div class="card-header">
            <h5 class="card-title">@(currentEmployeeAsset.EmpAssetId == 0 ? "Assign New Asset" : $"Edit Assignment (ID: {currentEmployeeAsset.EmpAssetId})")</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@currentEmployeeAsset" OnValidSubmit="@SaveEmployeeAsset">
                <DataAnnotationsValidator />

                <div class="form-group mb-3">
                    <label>Employee Id:</label>
                    <InputSelect @bind-Value="currentEmployeeAsset.EmployeeId" class="form-select">
                        <option value="0">-- Select Employee Id --</option>
                        @foreach (var emp in employees)
                        {
                            <option value="@emp.EmployeeId">@emp.EmployeeId - @emp.FirstName @emp.LastName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => currentEmployeeAsset.EmployeeId)" />
                </div>

                <div class="form-group mb-3">
                    <label>Asset:</label>
                    <InputSelect @bind-Value="currentEmployeeAsset.AssetId" class="form-select">
                        <option value="0">-- Select Asset Name --</option>
                        @foreach (var ast in assets)
                        {
                            <option value="@ast.AssetId">@ast.AssetName (@ast.SerialNumber)</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => currentEmployeeAsset.AssetId)" />
                </div>

                <div class="form-group mb-3">
                    <label>Issue Date:</label>
                    <InputDate @bind-Value="currentEmployeeAsset.IssueDate" class="form-control" />
                    <ValidationMessage For="@(() => currentEmployeeAsset.IssueDate)" />
                </div>

                <button type="submit" class="btn btn-success me-2">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@if (showDetails && selectedDetailsAsset is not null)
{
    <div class="card mb-3 border-info">
        <div class="card-header bg-info text-white">
            <h5>Employee Asset Details (ID: @selectedDetailsAsset.EmpAssetId)</h5>
        </div>
        <div class="card-body">
            <p><strong>Employee ID:</strong> @selectedDetailsAsset.Employee?.EmployeeId - @selectedDetailsAsset.Employee?.FirstName @selectedDetailsAsset.Employee?.LastName</p>
            <p><strong>Asset:</strong> @selectedDetailsAsset.Asset?.AssetName (@selectedDetailsAsset.Asset?.SerialNumber)</p>
            @* Removed AssetType from details, as it's typically part of Asset, not EmployeeAsset directly. If it's a denormalized field on EmployeeAsset, you can add it back. *@
            <p><strong>Issue Date:</strong> @selectedDetailsAsset.IssueDate.ToShortDateString()</p>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearDetails">Close</button>
        </div>
    </div>
}


@if (showConfirmDeleteModal && deleteTargetAsset != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the asset assignment:</p>
                    <ul>
                        <li><strong>Employee ID:</strong> @deleteTargetAsset.Employee?.EmployeeId - @deleteTargetAsset.Employee?.FirstName @deleteTargetAsset.Employee?.LastName</li>
                        <li><strong>Asset:</strong> @deleteTargetAsset.Asset?.AssetName (@deleteTargetAsset.Asset?.SerialNumber)</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}


@if (employeeAssets == null)
{
    <p>Loading employee assets...</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>EMPASSET ID</th>
                <th>EMPLOYEE</th> @* Changed to "EMPLOYEE" as we show name now *@
                <th>ASSET NAME</th>
                <th>ISSUE DATE</th>
                <th>ACTION</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var empAsset in employeeAssets)
            {
                <tr>
                    <td>@empAsset.EmpAssetId</td>
                    <td>@empAsset.Employee?.EmployeeId - @empAsset.Employee?.FirstName @empAsset.Employee?.LastName</td>
                    <td>@(empAsset.Asset != null ? $"{empAsset.Asset.AssetName} ({empAsset.Asset.SerialNumber})" : "N/A")</td>
                    <td>@empAsset.IssueDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => EditEmployeeAsset(empAsset)">Edit</button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowDetails(empAsset)">Details</button>
                        <button class="btn btn-sm btn-danger me-1" @onclick="() => PromptDelete(empAsset)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EmployeeAsset>? employeeAssets;
    private List<EmployeeMaster> employees = new();
    private List<AssetMaster> assets = new();

    private EmployeeAsset currentEmployeeAsset = new();
    private EmployeeAsset? selectedDetailsAsset;
    private bool showDetails = false;
    private bool showConfirmDeleteModal = false;
    private EmployeeAsset? deleteTargetAsset;

    private bool showEditForm = false;

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = DbFactory.CreateDbContext(); // Use DbContextFactory
        try
        {
            employees = await dbContext.Employees.ToListAsync();
            assets = await dbContext.Assets.ToListAsync();
            await LoadEmployeeAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during OnInitializedAsync in EmployeeAssets.razor: {ex.Message}");
            employees = new List<EmployeeMaster>();
            assets = new List<AssetMaster>();
            employeeAssets = new List<EmployeeAsset>(); // Ensure lists are initialized
        }
    }

    private async Task LoadEmployeeAssets()
    {
        using var dbContext = DbFactory.CreateDbContext(); // Use DbContextFactory
        try
        {
            employeeAssets = await dbContext.EmployeeAssets
                .Include(ea => ea.Employee)
                .Include(ea => ea.Asset)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employee assets: {ex.Message}");
            employeeAssets = new List<EmployeeAsset>();
        }
    }

    private void AddNewEmployeeAsset()
    {
        currentEmployeeAsset = new EmployeeAsset
        {
            EmployeeId = 0, // Ensure default for dropdown
            AssetId = 0,    // Ensure default for dropdown
            IssueDate = DateTime.Today
        };

        showEditForm = true;
    }

    private void EditEmployeeAsset(EmployeeAsset empAsset)
    {
        currentEmployeeAsset = new EmployeeAsset
        {
            EmpAssetId = empAsset.EmpAssetId,
            EmployeeId = empAsset.EmployeeId,
            AssetId = empAsset.AssetId,
            IssueDate = empAsset.IssueDate,
            // AssetName and AssetType are navigation properties, not directly on EmployeeAsset for editing
            // Remove these lines if they are not direct columns on EmployeeAsset table
            // AssetName = empAsset.AssetName,
            // AssetType = empAsset.AssetType
        };
        showEditForm = true;
    }

    private async Task SaveEmployeeAsset()
    {
        if (!showEditForm || currentEmployeeAsset is null)
            return;

        using var dbContext = DbFactory.CreateDbContext(); // Use DbContextFactory
        try
        {
            // Removed direct setting of AssetName/AssetType from selected asset.
            // These properties are usually obtained via the navigation property 'Asset'
            // when retrieving data from the DB, not directly stored on EmployeeAsset.
            // If your EmployeeAsset model *does* have these as denormalized fields,
            // then you would need to re-add this logic.

            if (currentEmployeeAsset.EmpAssetId == 0)
            {
                dbContext.EmployeeAssets.Add(currentEmployeeAsset);
            }
            else
            {
                var existing = await dbContext.EmployeeAssets.FindAsync(currentEmployeeAsset.EmpAssetId);
                if (existing != null)
                {
                    // Update only the properties that belong to the EmployeeAsset table itself
                    existing.EmployeeId = currentEmployeeAsset.EmployeeId;
                    existing.AssetId = currentEmployeeAsset.AssetId;
                    existing.IssueDate = currentEmployeeAsset.IssueDate;
                    // If AssetName and AssetType are denormalized fields on EmployeeAsset, update them here:
                    // existing.AssetName = currentEmployeeAsset.AssetName;
                    // existing.AssetType = currentEmployeeAsset.AssetType;
                }
            }

            await dbContext.SaveChangesAsync();

            showEditForm = false;
            currentEmployeeAsset = new EmployeeAsset();
            await LoadEmployeeAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Save failed: " + ex.Message);
        }
    }

    private void PromptDelete(EmployeeAsset asset)
    {
        deleteTargetAsset = asset;
        showConfirmDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        deleteTargetAsset = null;
        showConfirmDeleteModal = false;
    }

    private void CancelEdit()
    {
        showEditForm = false;
        currentEmployeeAsset = new EmployeeAsset();
    }

    private async Task ConfirmDelete()
    {
        using var dbContext = DbFactory.CreateDbContext(); // Use DbContextFactory
        if (deleteTargetAsset != null)
        {
            try
            {
                // Find the entity in the current context or attach it to remove
                var entityToRemove = dbContext.EmployeeAssets.Local.FirstOrDefault(e => e.EmpAssetId == deleteTargetAsset.EmpAssetId);
                if (entityToRemove == null)
                {
                    // If not found in local cache, attach it as Unchanged so Remove can track it
                    dbContext.Entry(deleteTargetAsset).State = EntityState.Deleted;
                }
                else
                {
                    dbContext.EmployeeAssets.Remove(entityToRemove);
                }

                await dbContext.SaveChangesAsync();
                await LoadEmployeeAssets();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting employee asset: {ex.Message}");
            }
        }
        CloseDeleteModal();
    }

    // Corrected method names
    private void ShowDetails(EmployeeAsset empAsset)
    {
        selectedDetailsAsset = empAsset;
        showDetails = true;
    }

    private void ClearDetails()
    {
        selectedDetailsAsset = null;
        showDetails = false;
    }

    // Removed the redundant DisposeAsync as IDbContextFactory manages context lifetimes.
    // public async ValueTask DisposeAsync()
    // {
    //     // No longer directly injecting DbContext, so no direct disposal needed here.
    // }
}